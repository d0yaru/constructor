var tpl = $('#mustache-tpl').html();
var Constructor = function(opts) {
    this.formChange = $('#filter-change');
    this.desShow    = $('.designerShow');
    this.imgChange  = this.desShow.find('img');
    this.form       = $('#filter');
    this.action     = this.form.attr('action');
    this.select     = this.form.find('#choice-type');
    this.seriaType  = 'classic';
    this.price      = $('<span class="priceWrap"><span class="price"></span> ' +
                      '&#8399;</span>');
    this.hint       = $('<span class="lblHint"><hr></span>');
    this.mainEl     = ['size', 'material', 'base'];
    this.addLinkEl  = ['size', 'material', 'base'];
    this.inputs     = '';
    this.enables    = '';
    this.conflicts  = '';
    this.visible    = {};
    this.elements   = [];
    this.imgArr     = [];

	this.removeTxt = NOT_RU ? 'Remove' : 'Убрать';

    var self = this;
    if (this.select.length) {
        this.select.change(function() {
            self.seriaType = $(this).val();
            self._getData();
        });
        this.select.val(1).trigger('change');
    } else {
        self.seriaType = SERIA_TYPE;
        self._getData();
    }
    this._events();
};
var resetInp = function resetInp(inp) {
    inp.closest('label')
       .removeClass('active')
       .closest('p')
       .find('.lieLink')
       .remove();
};
var disableInp = function disableInp(inp) {

    resetInp(inp);
    inp.prop('checked', false)
       .prop('disabled', true)
       .closest('label')
       .addClass('disabled');
};

var getEl = function getEl(item) {
    var split  = item.split(':');
    var elName = split.shift();
    var elVal  = split.shift();
    var inpEl  = $('form').find('input').filter('[name=' + elName + ']');

    if (elVal) {
        inpEl = inpEl.filter('[value=' + elVal + ']');
    }
    return inpEl;
};

var previewShow = function previewShow() {
    $(this).find('img').show();
};

var previewHide = function previewHide() {
    $(this).find('img').hide();
};

var pt = Constructor.prototype;

pt.addToImgArr = function addToImgArr(el) {
    var self = this;
    self.imgArr = [];
    this.form.find('input:checked').each(function() {
        var el   = $(this);
        var name = el.attr('name');
        var val  = el.val();
        self.imgArr.push(name + ':' + val);
    });
};
pt._render = function() {
    this.dopEl = this.form.find('.dopEl input');
    this._inpStyle();
};
pt._events = function() {
    var self = this;
    this.form.on('click', '.del', function() {
        self._unChecked($(this));
        self._btnAdd();
    });

    this.form.on('change', 'input', function() {
        self._changeInput($(this));
        self._btnAdd();
    })
    .on('click', '.filterTab .inpLbl', function() {
        self._switchInp($(this));
        self._btnAdd();
    })
    .on('click', '#goto', function(e) {
        e.preventDefault();
        var seria = $(this).attr('href');

        if (self.select.length) {
            self.select.val(seria).trigger('change');
            self.select.trigger("chosen:updated");
        } else {
            self.seriaType = seria;
            self._getData();
        }
    })
    .on('mouseover', '.preview', previewShow)
    .on('mouseleave', '.preview', previewHide)
    .on('mouseover', 'label', function() {
        self.hintShow($(this));
    })
    .on('mouseleave', 'label', function() {
        self.hintHide();
    })
    .on('submit', function(e) {
        e.preventDefault();
        self._sendForm();
    })
    .on('click', '#print', function(e) {
        self._print();
        e.preventDefault();
    });
    $(window).scroll(function(){
        var position    = $(this).scrollTop();
        var imgPosition = Math.floor($('.designerShowWrap').position().top);

        if (position > imgPosition) {
            self.desShow.css({
                'position' : 'fixed',
                'top' : 0
            })
        } else {
            self.desShow.removeAttr('style');
        }
    });
};

pt._btnAdd = function() {
    var self       = this;
    var submitBttn = this.form.find('.inpSubmit');

    var isBtn      = typeof self.TXT_ADD_TO_BASKET !== 'undefined';
    var isLink     = typeof submitBttn.attr('herf') !== 'undefined';

    if (!isBtn && !isLink) {
        return;
    }

    submitBttn.replaceWith('<input class="inpSubmit bigBttn"' +
                            ' type="submit"' +
                            ' value="' + self.TXT_ADD_TO_BASKET + '">');
};

pt._inpStyle = function() {
    this.radio  = this.form.find('input[type=radio]');
    this.check  = this.form.find('.checkboxStyle input');
    this.inputs = this.radio.add(this.check);

    var self   = this;

    $('<i></i>').insertBefore(this.inputs);
};
pt._addRemoveLink = function(el) {
    var self       = this;
    var name       = el.attr('name');
    var i          = this.addLinkEl.length;
    var addRemove  = true;
    var removeLink = $('<span class="del lieLink">'+ this.removeTxt +'</span>');

    while (i--) {
        if (name === self.addLinkEl[i]) {
            addRemove = false;
        }
    }
    if (!addRemove) {
        return;
    }
    el.closest('p').append(removeLink);
};
pt._changeMainEl = function(el) {
    var self   = this;
    var i      = this.mainEl.length;
    var name   = el.attr('name');
    var mainEl = false;
    //this.elements = {};
    while (i--) {
        if (name === self.mainEl[i]) {
            mainEl = true;
        }
    }
    if (!mainEl) {
        return;
    }
    var $allInp = el.closest('div').nextAll();
    this.form.find('.lieLink').remove();

    $allInp.find('label')
           .removeClass('active')
        .find('input')
           .prop('checked', false);

    switch (name) {
        case 'material' :
            var $inp = $('#filter-change input[name=size]').eq(0);
            $inp.prop('checked', true).closest('label').addClass('active');
            $inp.trigger('change');
            break;
        case 'size' :
            var $inpSize = $('#filter-change input[name=base]').eq(0);
            $inpSize.prop('checked', true);
            $inpSize.closest('label').addClass('active');
            $inpSize.trigger('change');

            break;
        default :
            break;
    }
    this.desShow.empty();
};
pt._changeInput = function(el) {
    var inpName   = el.attr('name');
    var type      = el.attr('type');
    var radio     = this.radio.filter('[name=' + inpName + ']');
    var label     = el.closest('label');
    var val       = el.val();

    if (type === 'radio') {
        resetInp(radio);
        this._addRemoveLink(el);
    }
    var method = (!el.is(':checked') && (type === 'checkbox')) ?
                 'removeClass' :
                 'addClass';

    label[method]('active');

    this._enablesElements(inpName, el);
    this._conflict(el);
    this._unvisibleEl(el);
    this._dopElements(el);
    this._changeMainEl(el);
    if (type === 'checkbox') {
        this.removeImg(el);
    }
    this.addToImgArr(el);
    this._addImages();
    this._addPrice();
};
pt._addImages = function() {
    var self = this;
    var l    = this.imgArr.length;

    while (l--) {
        var img   = self.imgArr[l];
        var split = img.split(':');
        var name  = split.shift();
        var val   = split.shift();
        var imgEl = self.images[name];

        for (var j in imgEl) {
            if (imgEl.hasOwnProperty(j)) {

                var src = imgEl[val];

                var checkImg = self.desShow.find('img')
                               .filter('[class="' + name + '"]');
                if (!checkImg.length) {
                   self.desShow.append('<img src="' + src +
                                       '" class="' + name + '">');
                } else {
                    checkImg.attr('src', src);
                }
            }
        }
    }
};
pt.removeImg = function(el) {
    var self  = this;
    var name  = el.attr('name');
    var img   = self.desShow.find('img');

    img.filter('[class="' + name + '"]').remove();
    var $dopEl = this.form.find('.dopEl input');
    $dopEl.each(function() {
        if ($(this).prop('checked')) {
            return;
        }
        img.filter('[class="' + $(this).attr('name') + '"]').remove();
    });
};
// раздизейбливаем эллементы
pt._enablesElements = function(name, el) {

    if (!this.enables.hasOwnProperty(name)) {
        return;
    }
    var self = this;
    var val  = el.val();
    var arr  = self.enables[name];
    /*
    из массива enables берем эллемент name, сбрасываем все эллементы, которые
    для него прописаны
     */

    for (var i in arr) {
        if (arr.hasOwnProperty(i)) {
            var item = arr[i];
            for (var k in item) {
                if (item.hasOwnProperty(k)) {
                    var inpEl = getEl(item[k]);
                    disableInp(inpEl);
                    self.removeImg(inpEl);
                }
            }
        }
    }

    if (!el.is(':checked')) {
        return;
    }
    // если эллемент чекнули
    val = ('*' in arr) ? '*' : val;
    /*
    берем массив эллементов которые надо раздизейблить
     */
    var inpArr = arr[val];
    for (var j in inpArr) {
        if (inpArr.hasOwnProperty(j)) {
            var checkEl = getEl(inpArr[j]);

            checkEl.prop('disabled', false)
                   .closest('label')
                   .removeClass('disabled');
        }
    }
};
pt._conflict = function(inp) {
    var self        = this;
    var search      = [];
    var found       = false;
    var unchecked   = false;
    var type        = inp.attr('type');
    var name        = inp.attr('name');
    var value       = inp.val();
    var conflictArr = [];

    var searchEl = function searchEl(el) {
        for (var i in el) {
            if (el.hasOwnProperty(i)) {
                var elChoice = getEl(el[i]);
                disabledEl(elChoice);
            }
        }
    };
    var disabledEl = function disabledEl(elChoice) {
        if (inp.is(':checked')) {
            /*
            elChoice - эллемент который надо задизейблить
            добавляем его в локальный массив конфликтов
             */
            conflictArr.push(elChoice);
            found = true;
            elChoice.prop('checked', false)
                    .prop('disabled', true)
                    .closest('label')
                    .addClass('disabled')
                    .closest('p')
                    .find('.lieLink')
                    .remove();
        } else {
            /*
            Определяем номер эллемента в локальном массиве конфликтов,
            удаляем его и раздизейбливаем эллемент учавствующий в конфликте
             */
            var num = conflictArr.indexOf(elChoice);
            conflictArr.splice(num, 1);
            unchecked = true;
            elChoice.prop('disabled', false)
                .closest('label')
                .removeClass('disabled');

        }
    };

    /*
    заносим имя выбранного эллемента в массив для сравнения
    с массивом конфликтов
    если это был эллемент radio, вносим еще и пару имя:значение
     */
    search.push(name);
    if (type === 'radio') {
        search.push(name + ':' + value); //добавляем значение инпута
    }
    /*
    Смотри в массиве конфликтов эллемент который выбрали
     */
    for (var t in self.conflicts) {
        if (self.conflicts.hasOwnProperty(t)) {
            var item = self.conflicts[t][0];
            for (var r in search) {
                if (search.hasOwnProperty(r)) {
                    if (search[r] === item[0]) {
                        searchEl(self.conflicts[t][1]);
                        break;
                    }
                }
            }
            if (found || unchecked) {
                break;
            }
        }
    }
};

pt._unChecked = function(el) {
    var label = el.closest('p').find('label');
    var inp   = label.find('input');
    var name  = inp.attr('name');

    inp.prop('checked', false);
    label.removeClass('active');
    el.remove();

    this._enablesElements(name, inp);
    this._conflict(inp);
    this.addToEl();
    this._dopElements(inp);
    this.removeImg(inp);
    this.addToImgArr(inp);
    this._addPrice();
};
// скрывает эллементы
pt._unvisibleEl = function(inp) {
    var self = this;
    var name = inp.attr('name');
    var val = inp.val();
    if (typeof this.unvisible === 'undefined') {
        return;
    }
    if (this.unvisible[name]) {
        if (this.visible[name]) {
            var tmp = self.visible[name];
            var obj = self.unvisible[name][tmp];
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    element = obj[i];
                    for (var j in element) {
                        if (element.hasOwnProperty(j)) {
                            var el = getEl(element);
                            el.closest('p').show()
                              .closest('.item')
                                .show();
                            el.closest('div').show();
                            break;
                        }
                    }
                }
            }
        }
        var unvisObj = this.unvisible[name][val];
        if (unvisObj) {
            for (var t in unvisObj) {
                if (unvisObj.hasOwnProperty(t)) {
                    element = unvisObj[t];
                    for (var l in element) {
                        if (element.hasOwnProperty(l)) {
                            var unvisEl = getEl(element);
                            var wrapEl = unvisEl.closest('p');

                            wrapEl.hide();

                            var cont = wrapEl.closest('div');
                            var count = cont.find('.wrap-radioStyle').length;

                            this.visible[name] = val;

                            if (count === 0) {
                                break;
                            }

                            cont.find('.wrap-radioStyle').each(function() {
                                if ($(this).attr('style') === 'display: none;') {
                                    count--;
                                }
                            });

                            if (count === 0) {
                                cont.hide();
                            }

                            break;
                        }
                    }
                }
            }
        }
    }
};
pt.addToEl = function() {
    var self = this;

    self.elements = [];
    this.form.find('input:checked').each(function() {
        var el   = $(this);
        var name = el.attr('name');
        var val  = el.val();

        self.imgArr.push(name + ':' + val);
        self.elements.push(name);
    });
};
pt._dopElements = function(inp) {
    var self = this;
    var name = inp.attr('name');
    this.addToEl();

    if (!inp.is(':checked')) {
        self.dopEl.prop('checked', false);
    }
    /*
    чекаем дополнительный эллемент
     */
    for (var i in self.dopArr) {
        if (self.dopArr.hasOwnProperty(i)) {
            var dopEl = self.dopArr[i];
            for (var j in dopEl) {
                if (dopEl.hasOwnProperty(j)) {
                    for (var k in self.elements) {
                        if (self.elements.hasOwnProperty(k)) {
                            var el = self.elements[k];
                            if (el === dopEl[j]) {
                                var $dopEl = self.dopEl
                                             .filter('[name=' + i + ']');
                                $dopEl.prop('checked', true);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
};

pt._switchInp = function(el) {
    var self    = this;
    var wrap    = el.closest('.filterTab');
    var inpWrap = el.next('div');
    var input   = wrap.find('input');

    input.each(function() {
        var inp  = $(this);
        var name = inp.attr('name');
        if (inp.is(':checked')) {
            var num = self.elements.indexOf(name);
            self.elements.splice(num, 1);
            inp.prop('checked', false);
            self.removeImg(inp);
            self._dopElements(inp);
        }
    });
    if (!el.hasClass('press')) {
        input.prop('disabled', true)
             .closest('label')
             .removeClass('active');

        wrap.find('.inpLbl').removeClass('press');
        wrap.find('div').hide();

        inpWrap.find('input').prop('disabled', false);

        el.addClass('press').next('div').show();
    }
    this.removeImg(el);
};
pt.hintShow = function(wrap) {
    if (!this.hintArr) {
        return;
    }
    var el = wrap.find('input');
    var name = el.attr('name');
    var val = el.val();
    var hintTxt = this.hintArr[name + ':' + val];

    if (!hintTxt) {
        return;
    }

    if (!$('.lblHint').length) {
        wrap.append(this.hint);
    }

    this.hint.text(hintTxt);
};

pt.hintHide = function() {
    if (!this.hintArr) {
        return;
    }
    $('.lblHint').remove();
};
var numberFormat = function numberFormat(str) {
    var d = str.toString();

    if (d.length > 3) {
        d = d.replace(/\B(?=(?:\d{3})+(?!\d))/g, ' ');
    }
    return d;
};
var toInt = function toInt(str) {
    var val = str.toString().replace(/[^0-9]/g, '');

    val = parseInt(val, 10) || 0;
    return val;
};
pt._addPrice = function() {
    var val = this.form.serializeArray();
    var material = test(this.priceArr);
    var size = test(material);
    var sum = 0;
    if (typeof size === 'undefined') {
        size = material;
    }
    for (var i in val) {
        if (val.hasOwnProperty(i)) {
            var value = val[i].value;
            var name = val[i].name;
            var item = size[name];

            for (var j in item) {
                if (item.hasOwnProperty(j)) {
                    sum +=  parseInt(item[value], 10 || 0);
                    break;
                }
            }
        }
    }
    if ($('.hasPrice').length) {
        if (!this.desShow.find('.priceWrap').length) {
            this.desShow.append(this.price);
        }
        sum = numberFormat(sum);
        this.price.find('.price').text(sum);
    }
    function test(price) {
        for (var i in price) {
            var obj = price[i];
            for (var j in obj) {
                for (var t in val) {
                    if (val[t].name == j) {
                        var value = val[t].value
                        if (obj[j] === value) {
                            var item = obj.item;
                            return item;
                        }
                    }
                }
            }
        }
    }
};
pt._getData = function() {
    var self = this;
    $.post(this.action, {type: this.seriaType}, function(data) {
        self.enables = data.enables;
        self.conflicts = data.conflicts;
        self.priceArr = data.price;
        self.unvisible = data.unvisible;
        self.hintArr = data.hint_arr;
        self.dopArr = data.dop;
        self.images = data.images;

        self.formChange.add(self.imgChange).empty();

        var tplElement;
        var render = function() {
            var content = $(Mustache.render(tplElement, data));

            self.formChange.append(content);

            self._render();

            $('.filterTab .inpLbl:first').addClass('press');
            $('.filterTab div:first').show();
            //input_style(data);
            $('#filter-change input[name=material]').eq(0).trigger('change');
            $('#filter-change input[name=size]').eq(0).trigger('change');
            $('#filter-change input[name=base]').eq(0).trigger('change');

            self.TXT_ADD_TO_BASKET = self.formChange.find('.inpSubmit').attr('value');

        };
        tplElement = $(tpl).filter('#element_tpl').html();
        render();

    }, 'json');
};

pt._getDataForm = function() {
    var val      = this.form.serializeArray();
    var material = test(this.priceArr);
    var size     = test(material);
    var send     = [];
    var summ     = toInt($('.designerShow .price').text());


    if (size === undefined) size = material;

    for (var i in val) {
        var value = val[i].value,
            name = val[i].name,
            item = size[name];
        for (var j in item) {
            send.push(item[value][1]);
            break;
        }
    }
    function test(price) {
        for (var i in price) {
            var obj = price[i];
            for (var j in obj) {
                for (var t in val) {
                    if (val[t].name == j) {
                        var value = val[t].value
                        if (obj[j] === value) {
                            var item = obj.item;
                            return item;
                        }
                    }
                }
            }
        }
    }
    return {
        seria         : this.seriaType,
        designer      : send,
        addConstructor: 1,
        summ          : summ
    };
};
pt._sendForm = function() {
    var self = this;
    var result = this._getDataForm();
    var submitBttn = this.form.find('.inpSubmit');

    $.ajax({
        url: '',
        type: 'post',
        data: result,
        dataType: 'json',
        success: function(data) {
            if (data.result === true) {
                hint(self.form.find('.withHint'), data);
                // self.form.unbind('submit');
                submitBttn.replaceWith('<a class="inpSubmit bigBttn" href="' +
                                        ORDER_PAGE + '">' +
                                        TXT_VIEW_BASKET + '</a>');
            }
        }
    }).always(function() {
        submitBttn.prop('disabled', true);
    });
};
function hint(wrap, data) {
    var val_count = parseInt(data.count, 10),
        info = numeral(val_count, 'позиция', 'позиции', 'позиций'),
        basket_data = {
            "info" : info,
            "count" : val_count,
            "url" : ORDER_PAGE
        },
        tpl_hint,
        render = function() {
            var content = $(Mustache.render(tpl_hint, data));
            wrap.append(content);
            setTimeout("$('.hint').remove()", 2000);
        };
    tpl_hint = $(tpl).filter('#hint').html();
    render();
    if($('.withBasket').length){
        var basket_count = parseInt($('.withBasket .lieButton').data('count'), 10),
            count = val_count + basket_count,
            info = numeral(count, 'позиция', 'позиции', 'позиций');
        $('.withBasket .lieButton b').text(data.count+' '+data.cart);
        $('.withBasket .lieButton').data('count', count);
    } else {
        $('.header .service').addClass('withBasket');
        var tpl_basket,
            render = function() {
                var content = $(Mustache.render(tpl_basket, data));
                $('.withBasket').prepend(content);
            };
        tpl_basket = $(tpl).filter('#basket_link').html();
        render();
    }
}
pt._print = function() {
    var result = this._getDataForm();
    var self = this;
    var img = $('.designerShow img');
    var imgArr = [];
    result.print = true;
    img.each(function() {
        imgArr.push($(this).attr('src') + ':' + $(this).attr('class'));
    });
    result.img = imgArr;

    $.ajax({
        url      : '',
        type     : 'POST',
        data     : result,
        success  : function(data) {
            var newWin = window.open("",
                            '_blank',
                            'width=800, height=600, resizable=yes, ' +
                            'scrollbars=yes, status=yes');


            newWin.document.write(data);
            newWin.document.close();
            newWin.focus();
        }
    });
};
